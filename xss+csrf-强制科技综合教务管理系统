1、	来到密保设置页面。
 
2、	点击保存并截取数据包。发现真实姓名经过url编码，其他参数均为明文传输。
 
3、	可将五个表框中任意一个表框对应提交的参数设置成1" onclick=alert(1)//，然后重放数据包。如图：
 
4、	点击表框“密码保护问题1”，成功触发xss。
 
因为onclick事件的触发需要点击表框，我们可以用onfocus事件，并且用它的autofocus属性去自动触发onfocus事件，把payload修改成：" onfocus=alert(1) autofocus ;'
这时一旦信息被保存，即立即自动触发，而且不断执行alert(1)，建议复现时慎用。
5、	有了后台的自动触发的xss，如何让用户保存xss的攻击代码呢。这里我想到了跨站请求伪造csrf。这两个漏洞组合后威力巨大。
6、	通过抓包保存步骤2中的请求包，使用burp生成csrf攻击页面。
 
7、将该页面保存至我的服务器（模拟攻击者服务器），对应地址为http://kevilcrew.cn/jwcsrf.html。
8、添加js代码，让表单自动提交。改进后的攻击代码如下：
 
9、刷新教务系统，确认保持登录状态后访问http://kevilcrew.cn/jwcsrf.html。
此时页面并没有响应。
 
这里只有一种可能，即服务端验证了referer请求来源，但这种认证机制只是简单地验证referer中是否存在cdjwc.ccu.edu.cn/jsxsd，可以很容易地绕过，我在攻击服务器的网站根目录中新建目录cdjwc.ccu.edu.cn/jsxsd，将csrf攻击页面放入该目录下，这样我的csrf攻击页面对应的页面即http://kevilcrew.cn/cdjwc.ccu.edu.cn/jsxsd/jwcsrf.html，请求头中的referer变成了http://kevilcrew.cn/cdjwc.ccu.edu.cn/jsxsd。
10、这里要注意的是我的xsspayload需要先进行转义，否则会因为双引号闭合而无法触发。最终页面代码如下：
 
确认保持登录状态后，我再访问http://kevilcrew.cn/cdjwc.ccu.edu.cn/jsxsd/jwcsrf.html
 
11、因为cookie没有设置httponly属性，所以可以直接使用csrf+xss组合拳获取用户权限。
 
